一、json的定义：
1. json是存储和交换文本信息的语法
2.语法格式：  变量名称自定义
  var jstu='{"name": "xiaoming","age":12}'    注:name为姓名    age为年龄  
3.json的字符串转换成对象obj
  var obj=JSON.parse(jstu)
4.一个对象转换成字符串方法
  var str=JSON.stringfy(对象)    使用typeof检测数据类型
5.JSON是一个内置对象所以可以直接使用，与Array、Date这些对象一样

二、ajax:                    
1.创建异步对象：                         
    var xhr = new XMlHttpRequest        变量可自行命名
                                        
2.设置发送方式与地址：                                                    
     xhr.open('GET','发送地址',true) //在IE如果通过ajax发送GET请求
   
  注意：//在IE如果通过ajax发送GET请求 ，IE则默认一个URL只有一个结果，
              所以想要不停接收新数据，需要在后面添加可以不影响地址，又可以不断更新的参数
       如时间参数---->  "地址?t="+(new Date().getTime())
           
3.请求发送：
     xhr.send()
     
4.等待结果，监听状态变化：状态在readyState中储存
     xhr.onreadystatechange=function(){} 
    状态变化；0--->请求未初始化
            1--->服务器连接搭建
            2--->请求已接收 
            3--->请求处理中
            4--->请求已完成，且响应就绪
      
5.处理返回结果在监听状态函数中执行：状态码state===200表示正常
   例： if(xhr.readyState === 4 && xhr.state ===200){} 
     
6.ajax的兼容性写法：try  catch语法
   var xhr = null; 
   if (window.XMLHttpRequest)
   {
    xhr=new XMLHttpRequest();
   }else{
    xhr=new ActiveXObject("Microsoft.XMLHTTP");
   }   

6.responseText 	获得字符串形式的响应数据。
  responseXML 	获得 XML 形式的响应数据。
      
------------------------二，请求----------------------------------
1. open() 和 send() 方法：          open(method,url,async)      send(string)
2.method：请求的类型；GET 或 POST
3.url：文件在服务器上的位置
4.async：true（异步）或 false（同步）
5.string：仅用于 POST 请求

-----------------------------三，响应---------------------------
1，responseText 	获得字符串形式的响应数据。
2.responseXML 	获得 XML 形式的响应数据。

---------------------三、PHP基础语法----------------------
1.注释：// 与     /**/
2.定义变量：   $num = 0;  利用$加上变量名。
3.打印：         echo $num;     此方法不能打印数组，对象。
4.数组：$arr = array(1,3,5)
   打印方法：print_r(#arr);
5.$dict = array('name'=>'xzc','age'=>'25')
6.循环：if、switch、三目、for、witch

-----------------------四、GET与POST请求的异同------------------
1.相同：都是将数据提交到远程服务器。
2.不同：提交数据存储的位置不同
         get：会将数据放到地址URL后面。发送的信息对外可见。信息的数量有限制（不超过2000个字符）。
         post：会将数据放到请求的前头。发送的信息对外不可见。数量没限制。
3.应用场景：
     get：用于提交非敏感数据和小数据。
     post：用于提交敏感数据(支付密码等)和大数据。